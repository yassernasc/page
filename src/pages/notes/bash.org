#+subject: bash

* bash scripting

** shebang
#+begin_src shell
  #!/bin/bash
#+end_src

** variables
#+begin_src shell
  MY_SHELL="bash"
  DYNAMIC_VALUE=$(hostname)

  echo "I like $MY_SHELL shell"
  echo "I like ${MY_SHELL}ing"
#+end_src

remember to not use spaces around the = sign

** codes
0 means success, any other number means a failure

$$ contains the PID of the currently running shell script

$? contains the return code of the previously executed command

stop and return a code with /exit/

** conditionals
#+begin_src shell
  if [ condition ]
  then
      ...comands
  fi
#+end_src

#+begin_src shell
  if [ condition ]
  then
      ...comands
  else
      ...commands
  fi
#+end_src

#+begin_src shell
  if [ condition ]
  then
      ...comands
  elif [ condition ]
  then
      ...commands
  else #
      ...comands
  fi
#+end_src

** looping
#+begin_src shell
  for VARIABLE_NAME in ITEM1 ITEM2 ITEM3
  do
      ...commands
  done
#+end_src

#+begin_src shell
  COLORS="red green blue"
  for COLOR in $COLORS
  do
      echo "COLOR: $COLOR"
  done
#+end_src

** receiving args
*** by position (positional parameters)
$0 is the script name, $1 is the first arg, and go on

$@ groups all positional parameters

*** by stdin
read -p "PROMPT" VARIABLE_NAME

** functions
#+begin_src shell
  function func-name() {
      local LOCAL_VARIABLE = ""

      ...commands

      return 0
  }

  func-name
#+end_src

use /return/ instead /exit/ to return a code

functions can receive args using positional paramenters
