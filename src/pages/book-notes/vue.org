#+page_title: vue notes
#+description: vue snippets and notes

* [[https://vuejs.org/guide/introduction.html][vue]]

** single-file component or just SFC

There are two ways to write a vue component:

*** composition API

With /setup/, all imports, variables, functions, (..) are by default visible on template.

#+begin_src vue
<script setup>
import { ref, onMounted } from 'vue'

const count = ref(0)

function increment() {
  count.value++
}

onMounted(() => {
  console.log(`The initial count is ${count.value}.`)
})
</script>

<template>
  <button @click="increment">Count is: {{ count }}</button>
</template>
#+end_src

*** options API

The /options api/ is implemented on top the /composition api/.

#+begin_src vue
  <script>
    export default {
      data() {
        return {
          count: 0
        }
      },

      methods: {
        increment() {
          this.count++
        }
      },

      mounted() {
        console.log(`The initial count is ${this.count}.`)
      }
    }
  </script>

  <template>
    <button @click="increment">Count is: {{ count }}</button>
  </template>
#+end_src

My choice to focus is the *composition api*, because:
- the syntax seems shorter
- is an advanced choice and i am feeling adventurous

** template syntax

*** text interpolation

#+begin_src html
  <span>Message: {{ msg }}</span>
#+end_src

*** attribute bindings

#+begin_src html
  <div :id="dynamicId"></div>
#+end_src

*** multiple attributes at once

#+begin_src typescript
  const objectOfAttrs = {
    id: 'container',
    class: 'wrapper'
  }
#+end_src

#+begin_src html
  <div v-bind="objectOfAttrs"></div>
#+end_src

*** directives

#+begin_src html
  <p v-if="seen">Now you see me</p>
#+end_src

#+begin_src html
  <a v-on:click="doSomething"> ... </a>

  <!-- shorthand -->
  <a @click="doSomething"> ... </a>
#+end_src

*** modifiers

With `.present`, event.preventDefault() is called automatically.

#+begin_src html
  <form @submit.prevent="onSubmit">...</form>
#+end_src

** reactivity

*** ref

Use getters and setters to track and watch changes, simple and good for primitive values.

#+begin_src typescript
  import { ref } from 'vue'

  const count = ref(0)

  console.log(count) // { value: 0 }
  console.log(count.value) // 0

  count.value++
  console.log(count.value) // 1
#+end_src

*** reactive

/Ref/ ideas doesn't work smoothly with complex data (objects, arrays, Map, ..).

With `reactive`, an object is converted to a [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy][Proxy]], which is also handy for track and watch changes.

Important: `ref` uses `reactive` internally when the value is an object.

#+begin_src typescript
  import { reactive } from 'vue'

  const state = reactive({ count: 0 })
#+end_src

#+begin_src html
  <button @click="state.count++">
    {{ state.count }}
  </button>
#+end_src

*** computed ref

Compute values based on reactivity.

#+begin_src vue
  <script setup>
  import { reactive, computed } from 'vue'

  const author = reactive({ books: ['klara and the sun'] })

  // here
  const hasBooks = computed(() => author.books.length > 0 ? 'Yes' : 'No')
  </script>

  <template>
    <p>Has published books:</p>
    <span>{{ publishedBooksMessage }}</span>
  </template>
#+end_src

** components

*** props

#+begin_src vue
  <!-- BlogPost.vue -->
  <script setup>
  defineProps({ title: String })
  </script>

  <template>
    <h4>{{ title }}</h4>
  </template>
#+end_src

#+begin_src html
  <BlogPost title="My journey with Vue" />
#+end_src

*** dynamic prop

#+begin_src vue
  <script setup>
  import ButtonCounter from './ButtonCounter.vue'
  const title = ref("Man Spends Entire Career Mastering Crappy Codebase")
  </script>

  <template>
    <BlogPost :title="title" />
  </template>
#+end_src

*** emit events to parent

#+begin_src vue
  <!-- Hey.vue -->
  <script setup>
  const emit = defineEmits(['hey'])
  </script>

  <template>
    <button @click="emit('hey', 'HOO!')">Hey button</button>
  </template>
#+end_src

#+begin_src html
  <Hey @hey="(res) => console.log(res)" />
#+end_src
